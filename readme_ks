# The reviewers and editor asked us to scan the Rice genome.
#
# OVERVIEW
# For efficiency, we are taking the following approach:
#
# 1. Scan the latest TIGR Rice genome (Jan 2006) peptide list with 
#    all of our motifs.
#
# 2. Parse the results and create a spreadsheet with OS-Stable-IDs, 
#    CRP####, start and stop positions
#
# 3. Scan the translated rice genomic sequence with our HMMs one
#    chromosome at a time.
#
# 4. Parse the results adding new entries into the spreadsheet
#    semi-automatically. (use the XML for neighbor info??)

DETAILS:
# 1. Scan the latest TIGR Rice genome (Jan 2006) peptide list with 
#    all of our motifs.

nice hmmpfam ~/projects/CRP/tgi_subgroups/generic/final/STEP2_annotate_grps/plant_CRPs.hmm /usr/local/data/rice/TIGR/all.pep > rice_CRPscan.hmms

# 2. Parse the results and create a spreadsheet with OS-Stable-IDs, 
#    CRP####, start and stop positions
# (took 1.5 hours!)

(nice time ~/bin/parse_HMM_hits.pl -top -E 0.1 -hitpat '^(CRP\d{4}).trim$' -querypat '^(LOC_Os\d{2}g\d+(?:\.\d+))\S+$' -aln rice_CRPscan.hmms > rice_ann_CRP.txt) >& log.parse

# 2a. separate this huge list into the more confident ones and the less 
#  confident ones.
perl -ne '@fields = split /\t/; if (($fields[2] eq "E-value") || (($fields[0] =~ /^LOC/) && ($fields[2] < 0.01))) { $printOn = "true";} elsif ($fields[0] =~ /^LOC/) {$printOn = "false";} if ($printOn eq "true") {print;}' rice_ann_CRP.txt > rice_ann_CRP_lt_0.01.txt

perl -ne '@fields = split /\t/; if (($fields[2] eq "E-value") || (($fields[0] =~ /^LOC/) && ($fields[2] >= 0.01))) { $printOn = "true";} elsif ($fields[0] =~ /^LOC/) {$printOn = "false";} if ($printOn eq "true") {print;}' rice_ann_CRP.txt > rice_ann_CRP_ge_0.01.txt

# The less confident file contained pure junk!  So, I copied the stringent
# one to a final file and edited out the garbage
cp rice_ann_CRP_lt_0.01.txt rice_known_CRP.txt.ORIG
emacs rice_known_CRP.txt.ORIG &

# Then I checked to make sure that I didn't screen off some good stuff
grep '^LOC' rice_ann_CRP_lt_0.01.txt > junk.old
grep '^LOC' rice_known_CRP.txt.ORIG > junk.new
diff junk.old junk.new | less

# Then I scanned the mostly garbage file rice_ann_CRP_ge_0.01.txt with less
# highlighting the character 'C' to see if I can identify hits with 
# clearly conserved cysteines but not much else.  This went quickly for
# ~1800 entries and gleaned 11 more hits.
less rice_ann_CRP_ge_0.01.txt
emacs rice_known_CRP.txt.ORIG &

# Extract out the FASTA files for the known CRPs to check that they
# have a sigpep and if they have a mispredicted structure
perl -ne 'if (/^(LOC\S+)/) { print "$1\n";}' rice_known_CRP.txt.ORIG > rice_known_CRP.lst

./pruneFASTAnoDot.pl /usr/local/data/rice/TIGR/all.pep 0 F rice_known_CRP.lst > rice_known_CRP.aa.fas

# Add 'MANUAL' to 32 mispredicted entries that need manual verification
# and remove 32 entries that clearly shouldn't have been included or are
# isoforms of other duplicates.
cp rice_known_CRP.txt rice_known_CRP.txt.ORIG
emacs rice_known_CRP.txt &

# extract gene info for Rice
~/bin/extract_XML_gene_info.pl /usr/local/data/rice/TIGR/all.xml > /usr/local/data/rice/TIGR/all_gene_info.txt

# Integrate rice coordinates with known CRP list to create a working 
# master Os_CRP_info.txt file as our starting point
./create_master_rice_list.pl /usr/local/data/rice/TIGR/all_gene_info.txt rice_known_CRP.txt > Os_CRP_info.txt

# For each of the 32 entries that needs manual work, collect an alignment
# in the directory manual_align with all related entries
grep CRP3210 Os_CRP_info.txt > manual_align/CRP3210.lst
./pruneFASTAnoDot.pl rice_known_CRP.aa.fas 0 F manual_align/CRP3210.lst > manual_align/CRP3210.aa.fas
cd manual_align
clustalw CRP3210.aa.fas
emacs CRP3210.aa.fas &

grep CRP0070 Os_CRP_info.txt > manual_align/CRP0070.lst
./pruneFASTAnoDot.pl rice_known_CRP.aa.fas 0 F manual_align/CRP0070.lst > manual_align/CRP0070.aa.fas
cd manual_align
cat ~/projects/CRP/tgi_subgroups/generic/final/STEP2_annotate_grps/CRP0070/CRP0070.fas >> CRP0070.aa.fas
clustalw CRP0070.aa.fas
emacs CRP0070.aa.fas &

# 3. Scan the translated rice genomic sequence with our HMMs one
#    chromosome at a time.
# NOTE: started at 10am Nov 6.  Should take 27 days using both processors
#   on katsura2!

nice ./run_HMMs.pl /usr/local/data/rice/TIGR/pseudochrom/chr0[123456].2000.aa.fas >& log1.out &
nice ./run_HMMs.pl /usr/local/data/rice/TIGR/pseudochrom/chr0[789].2000.aa.fas /usr/local/data/rice/TIGR/pseudochrom/chr1?.2000.aa.fas >& log2.out &

#
# 4. Parse translated rice genomic sequence hits one chromosome at a time
#
# Wow, 6 hours for chr1 yielding 13,656 hits (4584 to CRP2830; 10,449 with 'X')
# chr2 took 5 hours for 11,146 hits (3832 to CRP2830; 8602 with 'X')
nice time ~/bin/parse_HMM_hits.pl -top -E 0.1 -hitpat '^(CRP\d{4}).trim$' -aln chr01.2000.hmmout > new_hits/chr01.hits.E0.1.txt

# filter out known hits + insignificant ones from CRP2830, with internal stop
screen_out_known_hits.pl manual_align/Os_CRP_info.csv new_hits/chr01.hits.E0.1.txt > new_hits/chr01.filt_hits.E0.1.txt

# separate this huge list into the more confident ones and the less 
#  confident ones.
perl -ne '@fields = split /\t/; if (($fields[2] eq "E-value") || (($fields[0] =~ /^chr/) && ($fields[2] < 0.01))) { $printOn = "true";} elsif ($fields[0] =~ /^chr/) {$printOn = "false";} if ($printOn eq "true") {print;}' new_hits/chr01.filt_hits.E0.1.txt > new_hits/chr01.filt_hits_lt_0.01.txt

perl -ne '@fields = split /\t/; if (($fields[2] eq "E-value") || (($fields[0] =~ /^chr/) && ($fields[2] >= 0.01))) { $printOn = "true";} elsif ($fields[0] =~ /^chr/) {$printOn = "false";} if ($printOn eq "true") {print;}' new_hits/chr01.filt_hits.E0.1.txt > new_hits/chr01.filt_hits_ge_0.01.txt

# edit the more confident ones
cp manual_align/Os_CRP_info.csv new_hits/Os_CRP_info_w_new.csv
less new_hits/chr01.filt_hits_lt_0.01.txt
emacs new_hits/Os_CRP_info_w_new.csv &

# keep track of all CRPs aa seqs in a fasta file
./pruneFASTAnoDot.pl rice_known_CRP.aa.fas 0 F new_hits/Os_CRP_info_w_new.csv > new_hits/Os_CRP.aa.fas
# correct the ones that were updated
emacs new_hits/Os_CRP.aa.fas &

# Now predict gene structure based on alignment with homologs
grep CRP0347 new_hits/Os_CRP_info_w_new.csv > new_hits/manual_align/CRP0347.lst
./pruneFASTAnoDot.pl new_hits/Os_CRP.aa.fas 0 F new_hits/manual_align/CRP0347.lst > new_hits/manual_align/CRP0347.aa.fas
cd new_hits/manual_align
cat ~/projects/CRP/tgi_subgroups/generic/final/STEP2_annotate_grps/CRP0347/CRP0347.fas >> CRP0347.aa.fas
clustalw CRP0347.aa.fas
emacs CRP0347.aa.fas &

showorf -sequence junk.fas -frames '1,2,3' -outfile junk.showorf

#
# 5. QC of manual files, plus correcting them
#
cd final

# sorted Os_CRP_info.csv file according to CRP#### and copied it to WORKSPACE
scripts/initial_cleanup.pl WORKSPACE/Os_CRP_info_w_new.ORIG.csv  > Os_CRP_info.csv

# check translation of na files
perl -ne 'if (/^>/) { print;} else {s/[acgtn]//g; if (!(/^\s*$/)) {print;}}' Os_CRP.na.fas > WORKSPACE/Os_CRP.CDS.fas

~/bin/translate_rf1.pl WORKSPACE/Os_CRP.CDS.fas > WORKSPACE/Os_CRP.trCDS.fas

scripts/compare_aa_seqs.pl Os_CRP.aa.fas WORKSPACE/Os_CRP.trCDS.fas


# 
# 6. Now go through all CRP#### groups of seqs, copying final alignments 
#  in the current directory (new_hits dir takes precedence over manual_align)
#
# NOTE: be sure to edit "ORIG" info and fasta files

ooffice WORKSPACE/Os_CRP_info_w_new.ORIG.csv &

# if an align exists in either of dirs ../new_hits/manual_align
#     nor ../manual_align/
cp ../new_hits/manual_align/CRP0220.aa.aln WORKSPACE/align/
jalview WORKSPACE/align/CRP0220.aa.aln

# regardless do the following 
grep CRP0000 Os_CRP_info.csv > WORKSPACE/align/CRP0000.lst

~/bin/extract_fasta.pl -ids WORKSPACE/align/CRP0000.lst -xactid Os_CRP.aa.fas > WORKSPACE/align/CRP0000.aa.fas

#  if there is only one from the group:
cat ~/projects/CRP/tgi_subgroups/generic/final/STEP2_annotate_grps/CRP0030/CRP0030.fas >> WORKSPACE/align/CRP0030.aa.fas

clustalw WORKSPACE/align/CRP0000.aa.fas

jalview WORKSPACE/align/CRP0000.aa.fas

#
# 7. Copy all final alignments into the final/align dir
#  and rerun the checks in #5 above
#
cp WORKSPACE/align/*.aln Os_CRP_align/
